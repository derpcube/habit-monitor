// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Security enhancements
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  
  @@index([userId])
  @@index([expires])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Security enhancements
  lastLoginAt   DateTime?
  loginAttempts Int       @default(0)
  lockedUntil   DateTime?
  accountStatus String    @default("active") // active, suspended, banned, pending_verification
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret String?
  backupCodes   String[] // Array of backup codes for 2FA
  
  // Privacy settings
  dataRetentionDays Int? @default(365) // How long to keep user data
  
  accounts Account[]
  sessions Session[]
  habits   Habit[]
  aiRecommendations AIRecommendation[]
  auditLogs UserAuditLog[]
  
  @@index([email])
  @@index([accountStatus])
  @@index([lastLoginAt])
}

model Habit {
  id          String   @id @default(cuid())
  title       String
  description String?
  color       String   @default("#3B82F6")
  category    String   @default("General")
  frequency   String   @default("daily") // daily, weekly, monthly
  target      Int      @default(1) // target completions per frequency period
  days        String?  // JSON array of days for weekly habits: ["monday", "tuesday", "friday"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  
  // Privacy and sharing settings
  isPrivate   Boolean  @default(true)
  isArchived  Boolean  @default(false)

  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  entries HabitEntry[]

  @@index([userId])
  @@index([category])
  @@index([isArchived])
  @@index([createdAt])
}

model HabitEntry {
  id            String   @id @default(cuid())
  date          DateTime @default(now())
  completed     Boolean  @default(true)
  value         Int      @default(1) // for habits that can be completed multiple times
  notes         String?
  completedAt   DateTime? // When the habit was actually completed (for time tracking)
  timeOfDay     String?  // "morning", "afternoon", "evening", "night" for better AI insights
  mood          Int?     @default(5) // 1-10 scale for correlation analysis
  difficulty    Int?     @default(5) // 1-10 scale, how difficult was it today
  habitId       String
  
  // Metadata for analytics
  deviceType    String?  // "mobile", "desktop", "tablet"
  timezone      String?

  habit Habit @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([habitId])
  @@index([timeOfDay])
  @@index([completedAt])
  @@index([date])
}

// New model to track AI recommendations to prevent duplicates
model AIRecommendation {
  id              String   @id @default(cuid())
  userId          String
  recommendationType String // "habit_suggestion", "time_optimization", "pattern_usage", etc.
  recommendationData Json   // Store the recommendation details
  createdAt       DateTime @default(now())
  usedAt          DateTime? // When the user acted on this recommendation
  dismissed       Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([recommendationType])
  @@index([createdAt])
}

// Security audit trail
model UserAuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // "login", "logout", "password_change", "data_export", "account_update", etc.
  details   Json?    // Additional details about the action
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@index([ipAddress])
}

// Security incidents tracking
model SecurityIncident {
  id          String   @id @default(cuid())
  type        String   // "brute_force", "suspicious_login", "data_breach_attempt", etc.
  severity    String   // "low", "medium", "high", "critical"
  description String
  ipAddress   String?
  userAgent   String?
  userId      String?
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  createdAt   DateTime @default(now())
  
  @@index([type])
  @@index([severity])
  @@index([resolved])
  @@index([createdAt])
  @@index([ipAddress])
} 